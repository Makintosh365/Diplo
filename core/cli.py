import typer
import pandas as pd
from pathlib import Path
from core.preprocessing import load_csv_files, extract_features, save_processed_data
from core.labeling import add_labels
from core.model import BotnetClassifier
from core.evaluator import evaluate_predictions

app = typer.Typer()


@app.command()
def train(data_dir: str = "data/raw", save_path: str = "data/processed/train.csv"):
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ CSV —Ñ–∞–π–ª–æ–≤ –≤ data/raw/
    """
    typer.echo("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    df = load_csv_files(data_dir)
    df = extract_features(df)
    df = add_labels(df)
    save_processed_data(df, save_path)

    typer.echo("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    classifier = BotnetClassifier()
    classifier.train(df)
    classifier.save_model()
    typer.echo("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


@app.command()
def predict(file: str):
    """
    –î–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ CSV —Ñ–∞–π–ª–∞.
    """
    typer.echo(f"üì• –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file}")
    df = load_csv_files(Path(file).parent.as_posix())
    df = df[df["source_file"] == Path(file).name]
    df = extract_features(df)

    classifier = BotnetClassifier()
    classifier.load_model(input_size=df.shape[1] - 1)  # –º–∏–Ω—É—Å source_file
    predictions = classifier.predict(df)

    result_df = df.copy()
    result_df["predicted_label"] = predictions
    typer.echo(result_df[["source_file", "predicted_label"]].value_counts())
    typer.echo("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")


@app.command()
def evaluate(file: str = "data/processed/train.csv"):
    """
    –í—ã–≤–æ–¥–∏—Ç –º–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—É—á–∞—é—â–µ–º –¥–∞—Ç–∞—Å–µ—Ç–µ.
    """
    typer.echo("üìä –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏...")
    df = pd.read_csv(file)
    df = add_labels(df)

    classifier = BotnetClassifier()
    classifier.load_model(input_size=df.shape[1] - 2)  # –±–µ–∑ source_file –∏ label

    y_true = df["label"].tolist()
    y_pred = classifier.predict(df)

    evaluate_predictions(y_true, y_pred)
    typer.echo("‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    app()
