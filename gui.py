import os
import sys
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import pandas as pd
import openpyxl
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import PatternFill
# core-–º–æ–¥—É–ª–∏
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "core")))
from core.preprocessing import extract_features, load_csv_files, save_processed_data
from core.labeling import add_labels
from core.model import BotnetClassifier


class TrafficApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏")
        self.geometry("700x500")
        self.configure(bg="#1c1f2b")

        self.selected_file = None
        self.result_df = None

        self.create_widgets()

    def create_widgets(self):
        title = tk.Label(self, text="–¢—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", font=("Arial", 24, "bold"), fg="white", bg="#1c1f2b")
        subtitle = tk.Label(self, text="", font=("Arial", 12), fg="lightgray", bg="#1c1f2b")
        title.pack(pady=(20, 0))
        subtitle.pack(pady=(0, 20))
        frame = tk.Frame(self, bg="#1c1f2b")
        frame.pack()
        # === ANALYZE TRAFFIC ===
        analyze = tk.LabelFrame(frame, text="–ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ñ–∏–∫–∞", bg="#2a2e3f", fg="white", font=("Arial", 10, "bold"), padx=20, pady=20)
        analyze.grid(row=0, column=0, padx=20, pady=10)
        self.label_path = tk.Label(analyze, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", fg="white", bg="#2a2e3f")
        self.label_path.pack()
        ttk.Button(analyze, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª", command=self.load_file).pack(pady=5)
        ttk.Button(analyze, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", command=self.generate_report).pack()
        # === TRAIN NETWORK ===
        train = tk.LabelFrame(frame, text="–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–æ–π —Å–µ—Ç–∏", bg="#2a2e3f", fg="white", font=("Arial", 10, "bold"), padx=20, pady=20)
        train.grid(row=0, column=1, padx=20, pady=10)
        ttk.Button(train, text="–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", command=self.retrain_model).pack(pady=30)
        # === SAVE REPORT ===
        ttk.Button(self, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", command=self.save_result).pack(pady=10)
        # === OUTPUT ===
        self.text = tk.Text(self, height=12, bg="#14151c", fg="white", insertbackground="white")
        self.text.pack(fill="both", padx=20, pady=10)
        
    def log(self, msg: str):
        self.text.insert("end", msg + "\n")
        self.text.see("end")

    def load_file(self):
        path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
        if path:
            self.selected_file = path
            self.label_path.config(text=os.path.basename(path))
            self.log(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {path}")


    def generate_report(self):
        if not self.selected_file:
            messagebox.showwarning("–ù–µ—Ç —Ñ–∞–π–ª–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª.")
            return
        try:
            chunk_iter = pd.read_csv(
                self.selected_file,
                low_memory=False,
                chunksize=50000,
            )

            model = BotnetClassifier()
            vectorizer = None
            scaler = None
            result_chunks = []

            for chunk in chunk_iter:
                chunk["source_file"] = os.path.basename(self.selected_file)
                df_feat, vectorizer, scaler = extract_features(
                    chunk.copy(), vectorizer, scaler
                )

                if model.model is None:
                    model.load_model(input_size=df_feat.shape[1] - 1)

                preds = model.predict(df_feat)
                chunk["predicted_label"] = preds
                result_chunks.append(chunk)

            df_raw = pd.concat(result_chunks, ignore_index=True)
            self.result_df = df_raw

            # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            suspicious = df_raw[df_raw["predicted_label"] != "normal"]
            if suspicious.empty:
                self.log("üü¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # üîΩ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä—É—á–Ω—É—é
            out_path = filedialog.asksaveasfilename(
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∫..."
            )
            if not out_path:
                self.log("üö´ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                return

            # üé® –¶–≤–µ—Ç–∞ –ø–æ –º–µ—Ç–∫–µ
            label_colors = {
                "botnet_http":     "ADD8E6",  # light blue
                "botnet_icmp":     "90EE90",  # light green
                "botnet_tcp":      "FFD580",  # light orange
                "botnet_slowloic": "FF9999",  # light red
            }

            # üßæ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.title = "Suspicious Packets"

            for r in dataframe_to_rows(suspicious, index=False, header=True):
                ws.append(r)

            ws.auto_filter.ref = ws.dimensions

            label_col_idx = None
            for i, cell in enumerate(ws[1], start=1):
                if cell.value == "predicted_label":
                    label_col_idx = i
                    break

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
            for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
                label = row[label_col_idx - 1].value
                color = label_colors.get(label, "DDDDDD")  # default gray
                fill = PatternFill(start_color=color, end_color=color, fill_type="solid")
                for cell in row:
                    cell.fill = fill

            wb.save(out_path)
            self.log(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_path}")

            summary = df_raw["predicted_label"].value_counts()
            self.log("üìä –°–≤–æ–¥–∫–∞ –ø–æ –º–µ—Ç–∫–∞–º:")
            self.log(summary.to_string())

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")



    def retrain_model(self):
        try:
            self.log("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ data/raw/")
            df = load_csv_files("data/raw")
            df, _, _ = extract_features(df)
            df = add_labels(df)
            save_processed_data(df, "data/processed/train.csv")

            self.log("üß† –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å...")
            model = BotnetClassifier()
            model.train(df)
            model.save_model()
            self.log("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}")

    def save_result(self):
        if self.result_df is None:
            messagebox.showinfo("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.")
            return
        path = filedialog.asksaveasfilename(defaultextension=".csv")
        if path:
            self.result_df.to_csv(path, index=False)
            self.log(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")


if __name__ == "__main__":
    app = TrafficApp()
    app.mainloop()
